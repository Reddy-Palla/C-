 C++
------------
-> c++ is an extension and implementation of new features in c language
-> It is object-oriented programming language. because it organizes code into objects, which are modules that contains code and functions .

Object- Oriented programming:
-----------------------
It is a methodology that helps to organize complex programs through the use of Inheritance, Encapsulation & polymorphism.

Compile-time
------------
It is the period when the programming code is converted in to  the machine code.


Run-time
------
It is the period of time when a program is running and generally occurs after compile time.
 

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Class:  It is a blueprint that defines the variables and methods. (size of empty class is 1 byte). 

Object: It is instance (or) physical existance of a class (or ) real world entity of a class.

Member functions : functions inside the class are called as member functions.(every member function must be called by object).

----------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------


         c                                          c++
      --------                                    --------
 1) Procedural oriented                        1) Object oriented
 2) Data is not secured                        2) Secured
 3) Access specifiers are not present         3) are present
 4)not strict type check                      4)  strict type check
 5) function driven                           5) object driven
 6)Access modifiers are present               6) not present

     
eg: code

 #include<iostream>       // input and output stream
 using namespace std;  
 int main()                  // without int main generates error
 {
   int x;
   cout<<"enter the x value"<<endl;
   cin>>x<<endl;
   cout<<x<<endl;
}

 ">>"  this is excretion operator.
 "<<"  this is insertion operator.
 
 "endl"  this is for next line.

Scope resolution operator:
----------------------------
uses:-
      
   1)To access the global variables when local variable with same name.
   2)To define the function outside of a class.
   3)To access the class static variables.
   4)In case of multiple inheritance.


eg:
 1)#include<iostream>                           2)#include<iostream>                                          3)#include<iostream>
  using namespace std;                             using namespace std;                                          using namespace std;
  int n=90;                                        class test               // test is class name                class test
  int main()                                       {                                                             {
  {                                                     int num;                                                   int num;
     int n=10;                                            public:                                                   static void display()
    cout<<n<<endl;    // prints 10                        void show();                                              {
    cout<<::n<<endl;  // prints 90                  };                                                                cout<<"hi"<<endl;
  }                                              void test::show()            // defining out side the class        }
                                                 {                                                               };
                                                    cout<<"hello"<<endl;                                        int main()
                                                 }                                                              {
                                                 int main()                                                                 test::display();  // prints hi
                                                 {                                                               }
                                                     test t;   // t is object of class test
                                                   t.show();   // function calling with object
                                                 }


Namespace:
------------
It is a feature in c++ that allows you to group related identifiers (like classes, functions, variables etc)under a common name to avoid naming conflicts.
-> It prevents naming clashes in large projects. 

Diff ways to access namespace:
----------------------------
1)Normal method ->  qualifying the namespace name and scope resolution operator.
     eg:
       #includue<iostream>
        int main()
        {
         std::cout<<"hello"<<std::endl;
         }
2) using directive -> All names under namespace
   eg: 
    #includue<iostream>
    using namespace std;
        int main()
        {
         cout<<"hello"<<endl;
         }
3) using delcartive -> individual names to be used without qualification.
   eg:
    #includue<iostream>
        int main()
        {
           using std::cout;
         cout<<"hello"<<std::endl;
         }

 some examples on namespace
------------------------------- 
#include<iostream>
using namespace std;
namespace SBI
{
  int accno=1234;
   void welcome_note()
    {
      cout<<"welcome to SBI"<<endl;
    }
}
namespace AXIS
{
  int accno=567;
   void welcome_note()
    {
      cout<<"welcome to  AXIS"<<endl;
     }
}


case -1                             case -2                           case-3
--------                           ----------                        --------
int main()                          using namespace SBI;               int main()
{                                   int main()                          {
  cout<<SBI::accno<<endl;           {                                      using namespace SBI;
 AXIS::welcome_note();                 cout<<accno<<endl;                   cout<<"accono"<<endl;
}                                       welcome_note();                      welcome_note();
                                     }                                    }
output-: 1234 and welcome to AXIS    output -: 1234 and welcome to SBI      output -:1234 and welcome to SBI


case -4                             case -5                           case-6
--------                           ----------                        --------
int main()                                                          int main()
{                                   int main()                          {
  using namespace SBI;           {                                      using namespace SBI;
  using namespace AXIS;                 using namespace SBI;                  cout<<"accono"<<endl;
}                                       cout<<accno<<endl;                     welcome_note();
                                       welcome_note();                       using namespace AXIS;
                                       using namespace AXIS;                  cout<<"accono"<<endl;
                                                                                  welcme_note();
                                     }                                    }
output-: Error (Ambiqity)           output -: 1234 and welcome to SBI      output -:error(amibqity)


case -7                             case -8                           case-9
--------                           ----------                        --------
using namespace SBI;                                                             
using namespace AXIS;
int main()                          using namespace SBI;               int main()
{                                   int main()                          {
  cout<<accno<<endl;                {                                      using namespace SBI;
 welcome_note();                     using namespace AXIS;                   cout<<"accono"<<endl;
   cout<<accno<<endl;                  cout<<accno<<edl;                       welcme_note();                                        
  welcome_note();                                                             {
                                                                               cout<<accno<<endl;
}                                       welcome_note();                      welcome_note();
                                     }                                    }
output-: error                    output -:error                      output -:error


case -10                             case -11                           case-9
--------                           ----------                        --------
int main()                                                         using namespace std;
{                                    int main()                      int main()
 { using namespace AXIS                                                  {     
  cout<<accno<<endl;                {                                      namespace SBI;
 welcome_note();                     using  AXIS::welcomme_note;            { 
 }                                   using SBI::accono;                      int accono=1234;       
  using namespace SBI;                                                       
   cout<<accno<<endl;                  cout<<accno<<edl;                      void welcme_note();                                        
  welcome_note();                                                             {
                                                                               
}                                       welcome_note();                      welcome_note();
                                     }                                     }
output-: no error                    output -:1234(always from SBI )                      output -:error
                                        welcome to AXIS(always from AXIS)



Reference:
-------------
It is used to provide alias /duplicate name for existing variables.
syntax:-   datatype &new_name=existing_name

Rules:- 1) Reference variable must be initialized at the time of declaration.
        2)Separate memory will not be created.
        3)Null reference will not be possible. 
        4)In it's life time reference variable cannot refer to another variable.
        5)Reference variable will derefernce automatically.
        6)Not for constant value  .->  
                                      int &rv=100; (invalid) 
                                     const int &rv=100;  (valid)

        7) one variable can have multiple references.
        8) reference to reference is not possible.
        9) pointer to reference is not possible.


Passing arguments to a function:
---------------------------------
1)call by value:
----------------- 
                 A copy of actual arguments is passed to formal arguments of the called function and any change made to formal arguments have no affect in actual arguments.
        eg:  void swap(int a,int b)
             {
                int t;
                t=a,a=b,b=t;
              }
              int main()
              {
                int x=10,y=20;
                swap(x,y);
                cout<<x<<" "<<y<<endl;   // output is 10,20
               }

2)Call by address:
-----------------
                The address of  arguments is passed to formal arguments of the called function and any change made to formal arguments  affects in actual arguments.
        eg:  void swap(int *a,int *b)
             {
                int t;
                t=a,a=b,b=t;
              }
              int main()
              {
                int x=10,y=20;
                swap(&x,&y);
                cout<<x<<" "<<y<<endl;   // output is 20,10
               }

3)Call by reference:
---------------------
                  Method of passing arguments to a function ,copies the reference of an argument in to the formal parameter inside the function, the refence is used to access to actual arguments used in call.any change made to formal arguments  affects in actual arguments
           eg:  void swap(int &a,int &b)
             {
                int t;
                t=a,a=b,b=t;
              }
              int main()
              {
                int x=10,y=20;
                swap(x,y);
                cout<<x<<" "<<y<<endl;   // output is 20,10
               }

* New operator:
------------------
For dynamic memory allocation
->Automatically finds the size.
->returns exact pointer.
->No need typecasting.


syntax: new datatype(variable)
        new datatype[size](array)

* delete:
-----------
For deallocating the memory.


          Malloc                                   New
         ---------                              ------------ 
 1)library function                            1) operator
 2)needs library                               2)no need
 3)sizeof operator required                    3)no need
 4)upon success results void                   4)exact pointer
 5)failure 0                                   5)throws execption
 6)memory initialization not possible          6)possible
 7)overloading not possible                    7)possible

eg:-

1) for 1-D array ->  
int *p;
p=new int [5];
                      
delete []p; 

2) for 2-D array ->
 int **p,r,c,i;
p=new int [r];
for(i=0;i<r;i++)
p[i]=new int [c];


for(i=0;i<r;i++)
delte [] p[i];
delete []p;

3) for string ->
  string *p;
 p=new string;

4) for 5 strings ->
   string *p;
  p=new string [5];

* Inline functions:-
--------------------------
It is a function where function call is replaced with the function defination.
syntax->   inline return_type fun_name(arguments);

restrictions:-
-----
1)It will not work if function is recursive.
2)control statements are not allowed.
3)static variables are not allowed.
4)return keyword not allowed.

eg:
   #include<iostream>
   using namespace std;
   inline void test()
   {
    cout<<"test"<<endl;
  }
 int main()
 {
  test();
 }


Q) Recursions is used in inline functions and if used what will happen?
A) No, recursions will not use
   if we use -> inline functions are expanded at compile time and recursion invloves repeated  function calls.
This could result in infinte inline expanisons,leading to compliation errors (or) exessive memory usage.

Q) can inline functions used in recurisons and if used what will happen?
A) It is technically allowed but it is genrally considered as wrong practise, compilers will typically ignore the inline directive
 for recursive calls to avoid infinte exapnsions (or) excessive memory usage.


  Macro                                 inline
-------                                 --------
1) it is one instruction and           1)function call replace with function 
 it expands the code with multiple            defination.
 instructions
2)It's mandatory to replace            2)it request compiler if possible to replace
3)expanded by processor                3)these are done by compiler
4)n no.of instructions                 4) not morethan 2
5)keyword-> #define                    5)keyword-> inline.


C structure                                    c++ structure
--------------                            ----------------------- 
1)empty structure size is 0 bytes        1) empty structure size is 1 byte.(for showing variable existance) 
2)collection of only data members        2) data members and member functions.
3)access specifiers are not presnet      3) present here.

c++ structure                              c++ class
--------------                           -----------------
1) By default members are public         1) by default members are private
2) by birth properties of structure      2) by birth private.
  are public.
3)default mode of inheritance is         3) by default mode of inheritance is private.
 public.

*This pointer:
-----------------
whenever a member function is called,this pointer is automatically passed to called member function implictly
-> this pointer is used to access tha object data members and member function.( it will tell that this object belogs to this class)

Features of c++:   
-----------------
a)Encapsulation
b)data abstraction
c)polymorphism
d)Inheritance


a)Encapsulation :-
---------
wrapping up of data and functions in to single unit is called Encapsulation.

Advantage :Data security.
